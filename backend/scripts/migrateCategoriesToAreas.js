const mongoose = require('mongoose');
const Incident = require('../models/Incident');
const Area = require('../models/Area');

// Conectar a MongoDB
mongoose.connect('mongodb://localhost:27017/incident-management', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

async function migrateCategoriesToAreas() {
    try {
        console.log('üîÑ Migrando categor√≠as a √°reas...\n');

        // Obtener todas las incidencias con categor√≠as
        const incidentsWithCategories = await Incident.find({
            category: { $exists: true, $ne: null }
        });

        if (incidentsWithCategories.length === 0) {
            console.log('‚úÖ No hay incidencias con categor√≠as para migrar');
            return;
        }

        console.log(`üìã Encontradas ${incidentsWithCategories.length} incidencias con categor√≠as`);

        // Obtener categor√≠as √∫nicas
        const uniqueCategories = [...new Set(incidentsWithCategories.map(incident => incident.category))];
        console.log(`üìä Categor√≠as √∫nicas encontradas: ${uniqueCategories.length}`);
        uniqueCategories.forEach(category => console.log(`  - ${category}`));

        // Crear √°reas basadas en categor√≠as
        const areaMapping = {};
        for (const category of uniqueCategories) {
            // Verificar si ya existe un √°rea con ese nombre
            let area = await Area.findOne({ name: category });

            if (!area) {
                // Crear nueva √°rea
                area = new Area({
                    name: category,
                    description: `√Årea migrada desde categor√≠a: ${category}`,
                    isActive: true
                });
                await area.save();
                console.log(`‚úÖ √Årea creada: ${category}`);
            } else {
                console.log(`‚ÑπÔ∏è  √Årea ya existe: ${category}`);
            }

            areaMapping[category] = area._id;
        }

        // Migrar incidencias
        let migratedCount = 0;
        for (const incident of incidentsWithCategories) {
            if (incident.category && areaMapping[incident.category]) {
                await Incident.findByIdAndUpdate(incident._id, {
                    $set: {
                        area: areaMapping[incident.category],
                        category: undefined // Remover categor√≠a
                    }
                });
                migratedCount++;
            }
        }

        console.log(`\n‚úÖ Migraci√≥n completada:`);
        console.log(`  - Incidencias migradas: ${migratedCount}`);
        console.log(`  - √Åreas creadas: ${Object.keys(areaMapping).length}`);

        // Verificar resultado
        const incidentsWithAreas = await Incident.find({ area: { $exists: true, $ne: null } });
        const remainingIncidentsWithCategories = await Incident.find({ category: { $exists: true, $ne: null } });

        console.log(`\nüìä Resultado de la migraci√≥n:`);
        console.log(`  - Incidencias con √°reas: ${incidentsWithAreas.length}`);
        console.log(`  - Incidencias con categor√≠as: ${remainingIncidentsWithCategories.length}`);

        // Mostrar √°reas creadas
        const allAreas = await Area.find();
        console.log(`\nüìä √Åreas en el sistema:`);
        allAreas.forEach(area => {
            console.log(`  - ${area.name} (${area.description})`);
        });

        console.log('\n‚úÖ Migraci√≥n de categor√≠as a √°reas completada exitosamente');

    } catch (error) {
        console.error('‚ùå Error durante la migraci√≥n:', error);
    } finally {
        mongoose.connection.close();
    }
}

migrateCategoriesToAreas();